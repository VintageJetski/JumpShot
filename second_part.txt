                                  cursor={{ strokeDasharray: '3 3' }}
                                  contentStyle={{ backgroundColor: '#0f172a', borderColor: '#1e40af' }}
                                  labelStyle={{ color: '#93c5fd' }}
                                  formatter={(value, name) => {
                                    // Convert coordinates to map callouts
                                    if (name === 'X Position' || name === 'Y Position') {
                                      let location = "";
                                      
                                      // Simplified mapping for Inferno areas
                                      const numValue = Number(value);
                                      if (numValue > 1000 && numValue < 2000) {
                                        if (name === 'X Position') location = " (A Site Area)";
                                        if (name === 'Y Position') location = " (Upper Mid)";
                                      } else if (numValue < -1000) {
                                        if (name === 'X Position') location = " (B Site/Banana Area)";
                                        if (name === 'Y Position') location = " (T Spawn Area)";
                                      } else if (numValue > 0 && numValue < 1000) {
                                        location = " (Mid Area)";
                                      }
                                      
                                      return [`${value}${location}`, name];
                                    }
                                    return [`${value}`, name];
                                  }}
                                />
                                <Scatter 
                                  name="Positions" 
                                  data={activePlayer ? getPlayerData(activePlayer) : []} 
                                  fill={activePlayer && data.analysis.playerMetrics[activePlayer].side.toLowerCase() === 't' 
                                    ? "#ef4444" 
                                    : "#3b82f6"}
                                />
                              </ScatterChart>
                            </ResponsiveContainer>
                            
                            {/* Player Role Info */}
                            <div className="absolute top-2 right-2 z-10 bg-blue-950/80 p-2 rounded text-xs">
                              <div className="font-medium text-blue-200">
                                {activePlayer && data.analysis.playerMetrics[activePlayer].side === 'T' ? 'T Role' : 'CT Role'}: 
                                <span className="ml-1 text-white">
                                  {activePlayer && data.analysis.playerMetrics[activePlayer].side === 'T' ? 
                                    (activePlayer === '76561197991272318' ? 'Lurker' : 
                                     activePlayer === '76561197997351207' ? 'Entry' : 'Support') : 
                                    (activePlayer === '76561198034202275' ? 'Anchor (B)' : 
                                     activePlayer === '76561197987144812' ? 'Rotator' : 'Anchor (A)')}
                                </span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="mt-4 p-3 bg-blue-950/40 rounded">
                            <h5 className="text-sm font-medium mb-2">Role Analysis</h5>
                            <div className="text-xs text-blue-300/90 space-y-1">
                              {activePlayer && (
                                <>
                                  {activePlayer && data.analysis.playerMetrics[activePlayer].side === 'T' ? (
                                    <>
                                      <p>Playing as a {activePlayer === '76561197991272318' ? 'Lurker' : 
                                                         activePlayer === '76561197997351207' ? 'Entry' : 'Support'}, this player&apos;s 
                                        movement pattern shows {' '}
                                        {activePlayer === '76561197991272318' ? 
                                          'flanking behaviors through less-traveled areas of the map, providing tactical advantages by surprising opponents from unexpected angles.' : 
                                          activePlayer === '76561197997351207' ? 
                                          'aggressive positioning at the front lines, leading the team&apos;s charge into bomb sites and creating early space.' : 
                                          'positioning that enables utility usage and trading potential, providing backup for entry fraggers.'}
                                      </p>
                                      <p className="mt-1">
                                        {activePlayer === '76561197991272318' ? 
                                          'Their rotation patterns demonstrate patience in timing and map awareness.' : 
                                          activePlayer === '76561197997351207' ? 
                                          'The data shows rapid site entry and high movement speed consistent with an entry role.' : 
                                          'The player&apos;s positioning shows strategic utility usage spots and trade-fragging positions.'}
                                      </p>
                                    </>
                                  ) : (
                                    <>
                                      <p>As a {activePlayer === '76561198034202275' ? 'B Site Anchor' : 
                                                  activePlayer === '76561197987144812' ? 'Rotator' : 'A Site Anchor'}, this player&apos;s 
                                        movement data reveals {' '}
                                        {activePlayer === '76561198034202275' 
                                          ? 'consistent positioning to hold and defend B site, maintaining control of key angles and chokepoints.' 
                                          : activePlayer === '76561197987144812' 
                                          ? 'flexible positioning between bomb sites, enabling quick rotations and mid-round adaptations.' 
                                          : 'strong A site anchoring with positioning that maximizes defensive advantages.'}
                                      </p>
                                      <p className="mt-1">
                                        {activePlayer === '76561198034202275' 
                                          ? 'Their position consistency suggests disciplined site control and angle holding.' 
                                          : activePlayer === '76561197987144812' 
                                          ? 'The movement patterns show optimized rotation paths and timings between sites.' 
                                          : 'Their site presence data indicates reliable site defense and occasional rotations when needed.'}
                                      </p>
                                    </>
                                  )}
                                </>
                              )}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {getPlayers().map((player) => (
                      <Card 
                        key={player.user_steamid}
                        className={`bg-blue-950/20 border ${
                          player.side.toLowerCase() === 't' 
                            ? 'border-red-900/30 hover:border-red-700/50' 
                            : 'border-blue-900/30 hover:border-blue-700/50'
                        } cursor-pointer transition-colors`}
                        onClick={() => setActivePlayer(player.user_steamid)}
                      >
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base flex justify-between items-center">
                            <span>{player.name}</span>
                            <Badge 
                              className={player.side.toLowerCase() === 't' 
                                ? "bg-red-500/70 text-xs" 
                                : "bg-blue-500/70 text-xs"
                              }
                            >
                              {player.side}
                            </Badge>
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="text-blue-300/70">Distance</span>
                            <span>{player.totalDistance.toFixed(0)} units</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-blue-300/70">Rotations</span>
                            <span>{player.rotations}</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-blue-300/70">Top Area</span>
                            <span>
                              {Object.entries(player.sitePresence)
                                .sort((a, b) => b[1] - a[1])[0][0]}
                            </span>
                          </div>
                        </CardContent>
                        <CardFooter className="pt-0">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="w-full text-blue-300 hover:text-blue-100"
                          >
                            View Details
                            <ChevronRight className="ml-1 h-4 w-4" />
                          </Button>
                        </CardFooter>
                      </Card>
                    ))}
                  </div>
                )}
              </TabsContent>
            </Tabs>
          )}
        </CardContent>
        
        {data && (
          <CardFooter className="flex justify-between border-t border-blue-900/30 pt-4">
            <p className="text-sm text-blue-300/70">
              Sample data from round {data.analysis.round_num}
            </p>
            <Button 
              variant="outline" 
              size="sm"
              onClick={handleRunAnalysis}
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-3 w-3 animate-spin" />
                  Reprocessing...
                </>
              ) : (
                "Reprocess Data"
              )}
            </Button>
          </CardFooter>
        )}
      </Card>
      
      {error && (
        <div className="p-4 bg-red-900/20 border border-red-900/50 rounded-md flex items-start gap-3">
          <AlertCircle className="h-5 w-5 text-red-500 flex-shrink-0 mt-0.5" />
          <div>
            <h3 className="font-medium text-red-400">Error Processing XYZ Data</h3>
            <p className="text-sm text-red-300/70 mt-1">
              {error instanceof Error ? error.message : 'Unknown error occurred'}
            </p>
          </div>
        </div>
      )}
    </div>
  );
}