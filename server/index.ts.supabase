import express, { Express, Request, Response } from 'express';
import { registerRoutes } from './routes';
import { setupAuth } from './auth';
import { initializePlayerData } from './playerDataLoader';
import { initializeRoundData } from './roundDataLoader';
import { testSupabaseConnection } from './supabase-db';
import { storage } from './storage';
import { supabaseStorage } from './supabase-storage';

// Initialize app
const app: Express = express();

// Configure middleware
app.use(express.json());

// Setup authentication
setupAuth(app);

// Determine which storage implementation to use
async function initializeStorage() {
  console.log('Testing Supabase database connection...');
  const isSupabaseConnected = await testSupabaseConnection();
  
  if (isSupabaseConnected) {
    console.log('Supabase connection successful. Using Supabase as primary data source.');
    // In a real implementation, we would replace the global storage object with supabaseStorage
    // This is just a placeholder until we fully integrate Supabase
    // storage = supabaseStorage;
    
    // For now, we'll just continue with the existing implementation
    await initializePlayerData();
    await initializeRoundData();
  } else {
    console.log('Supabase connection failed or not configured. Using CSV files as data source.');
    await initializePlayerData();
    await initializeRoundData();
  }
}

// Initialize data and start server
async function start() {
  try {
    await initializeStorage();
    
    // Register routes and get HTTP server
    const httpServer = registerRoutes(app);

    // Default port
    const PORT = process.env.PORT || 5000;
    
    // Start server
    httpServer.listen(PORT, () => {
      console.log(`[express] serving on port ${PORT}`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// Start the application
start();